# Documentação do Banco de Dados - ERP Livraria
========================================

Este documento descreve a estrutura completa do banco de dados implementado no Supabase para o sistema ERP de livraria, incluindo tabelas, relacionamentos, funções, gatilhos, políticas de segurança e outros elementos.

## 1. Tabelas

### 1.1. Users
- **Descrição**: Armazena informações sobre os usuários do sistema.
- **Campos**:
  - id (UUID, PK): Identificador único do usuário
  - email (TEXT): Email do usuário (único)
  - name (TEXT): Nome do usuário
  - role (TEXT): Papel do usuário ('admin', 'manager', 'cashier', 'inventory')
  - created_at (TIMESTAMP): Data de criação do registro

### 1.2. Customers
- **Descrição**: Armazena informações sobre os clientes da livraria.
- **Campos**:
  - id (UUID, PK): Identificador único do cliente
  - name (TEXT): Nome do cliente
  - email (TEXT): Email do cliente
  - phone (TEXT): Telefone do cliente
  - address (TEXT): Endereço do cliente
  - city (TEXT): Cidade
  - state (TEXT): Estado
  - zip (TEXT): CEP
  - notes (TEXT): Observações
  - created_at (TIMESTAMP): Data de criação do registro
  - updated_at (TIMESTAMP): Data de atualização do registro

### 1.3. Suppliers
- **Descrição**: Armazena informações sobre os fornecedores de livros.
- **Campos**:
  - id (UUID, PK): Identificador único do fornecedor
  - name (TEXT): Nome do fornecedor
  - contact_name (TEXT): Nome do contato
  - email (TEXT): Email do fornecedor
  - phone (TEXT): Telefone do fornecedor
  - address (TEXT): Endereço do fornecedor
  - city (TEXT): Cidade
  - state (TEXT): Estado
  - zip (TEXT): CEP
  - notes (TEXT): Observações
  - created_at (TIMESTAMP): Data de criação do registro
  - updated_at (TIMESTAMP): Data de atualização do registro

### 1.4. Books
- **Descrição**: Armazena informações sobre os livros disponíveis no estoque.
- **Campos**:
  - id (UUID, PK): Identificador único do livro
  - title (TEXT): Título do livro
  - author (TEXT): Autor do livro
  - isbn (TEXT): ISBN do livro
  - publisher (TEXT): Editora
  - category (TEXT): Categoria
  - subcategory (TEXT): Subcategoria
  - purchase_price (DECIMAL): Preço de compra
  - selling_price (DECIMAL): Preço de venda
  - quantity (INTEGER): Quantidade em estoque
  - minimum_stock (INTEGER): Quantidade mínima em estoque
  - supplier_id (UUID, FK): Referência ao fornecedor
  - created_at (TIMESTAMP): Data de criação do registro
  - updated_at (TIMESTAMP): Data de atualização do registro

### 1.5. Sales
- **Descrição**: Armazena informações sobre as transações de venda.
- **Campos**:
  - id (UUID, PK): Identificador único da venda
  - customer_id (UUID, FK): Referência ao cliente
  - user_id (UUID, FK): Referência ao usuário que registrou a venda
  - total (DECIMAL): Valor total da venda
  - payment_method (TEXT): Método de pagamento ('cash', 'credit_card', 'debit_card', 'pix', 'transfer')
  - payment_status (TEXT): Status do pagamento ('paid', 'pending', 'canceled')
  - notes (TEXT): Observações
  - created_at (TIMESTAMP): Data de criação do registro

### 1.6. Sale_Items
- **Descrição**: Armazena os itens incluídos em cada venda.
- **Campos**:
  - id (UUID, PK): Identificador único do item de venda
  - sale_id (UUID, FK): Referência à venda
  - book_id (UUID, FK): Referência ao livro
  - quantity (INTEGER): Quantidade
  - unit_price (DECIMAL): Preço unitário
  - discount (DECIMAL): Desconto
  - total (DECIMAL): Valor total do item

### 1.7. Accounts_Receivable
- **Descrição**: Armazena informações sobre pagamentos pendentes de clientes.
- **Campos**:
  - id (UUID, PK): Identificador único da conta a receber
  - sale_id (UUID, FK): Referência à venda
  - amount (DECIMAL): Valor a receber
  - due_date (DATE): Data de vencimento
  - payment_date (DATE): Data de pagamento
  - status (TEXT): Status ('pending', 'paid', 'overdue', 'canceled')
  - notes (TEXT): Observações
  - created_at (TIMESTAMP): Data de criação do registro
  - updated_at (TIMESTAMP): Data de atualização do registro

### 1.8. Accounts_Payable
- **Descrição**: Armazena informações sobre pagamentos a fornecedores.
- **Campos**:
  - id (UUID, PK): Identificador único da conta a pagar
  - supplier_id (UUID, FK): Referência ao fornecedor
  - description (TEXT): Descrição
  - amount (DECIMAL): Valor a pagar
  - due_date (DATE): Data de vencimento
  - payment_date (DATE): Data de pagamento
  - status (TEXT): Status ('pending', 'paid', 'overdue', 'canceled')
  - notes (TEXT): Observações
  - created_at (TIMESTAMP): Data de criação do registro
  - updated_at (TIMESTAMP): Data de atualização do registro

## 2. Relacionamentos

- **Customers → Sales**: Um cliente pode ter múltiplas vendas
- **Users → Sales**: Um usuário pode registrar múltiplas vendas
- **Sales → Sale_Items**: Uma venda contém múltiplos itens
- **Books → Sale_Items**: Um livro pode estar em múltiplos itens de venda
- **Suppliers → Books**: Um fornecedor pode fornecer múltiplos livros
- **Sales → Accounts_Receivable**: Uma venda pode gerar múltiplas contas a receber
- **Suppliers → Accounts_Payable**: Um fornecedor pode ter múltiplas contas a pagar

## 3. Índices

Foram criados índices para melhorar o desempenho de consultas frequentes:

- idx_books_title: Índice na coluna title da tabela books
- idx_books_author: Índice na coluna author da tabela books
- idx_books_isbn: Índice na coluna isbn da tabela books
- idx_books_category: Índice na coluna category da tabela books
- idx_sales_created_at: Índice na coluna created_at da tabela sales
- idx_sales_customer: Índice na coluna customer_id da tabela sales
- idx_accounts_receivable_due_date: Índice na coluna due_date da tabela accounts_receivable
- idx_accounts_payable_due_date: Índice na coluna due_date da tabela accounts_payable

## 4. Views (Visões)

As seguintes views foram criadas para facilitar consultas frequentes:

### 4.1. view_inventory_summary
- **Descrição**: Resumo do estoque atual agrupado por categoria
- **Colunas**: category, total_books, total_quantity, total_value

### 4.2. view_sales_report
- **Descrição**: Relatório de vendas por dia
- **Colunas**: sale_date, total_sales, total_amount, average_sale

### 4.3. view_low_stock
- **Descrição**: Livros com estoque abaixo do mínimo
- **Colunas**: id, title, author, category, quantity, minimum_stock, selling_price

### 4.4. view_overdue_receivables
- **Descrição**: Contas a receber vencidas
- **Colunas**: id, sale_id, customer_name, amount, due_date, days_overdue

### 4.5. view_overdue_payables
- **Descrição**: Contas a pagar vencidas
- **Colunas**: id, supplier_name, description, amount, due_date, days_overdue

## 5. Funções

### 5.1. update_updated_at_column()
- **Descrição**: Atualiza o timestamp updated_at nas tabelas

### 5.2. decrease_book_stock()
- **Descrição**: Diminui o estoque de livros quando um item é vendido

### 5.3. check_minimum_stock()
- **Descrição**: Verifica se o estoque está abaixo do mínimo após atualizações

### 5.4. calculate_sale_total()
- **Descrição**: Calcula automaticamente o total da venda com base nos itens

### 5.5. register_sale(p_customer_id, p_user_id, p_payment_method, p_payment_status, p_notes, p_items)
- **Descrição**: Função RPC para registrar uma venda completa com seus itens em uma única operação
- **Parâmetros**: Dados da venda e array JSON com itens
- **Retorno**: ID da venda criada

### 5.6. receive_payment(p_receivable_id)
- **Descrição**: Função RPC para receber um pagamento de conta a receber
- **Parâmetros**: ID da conta a receber
- **Retorno**: TRUE se bem-sucedido

### 5.7. receive_books(p_supplier_id, p_due_date, p_items, p_notes)
- **Descrição**: Função RPC para registrar recebimento de livros
- **Parâmetros**: ID do fornecedor, data de vencimento, array JSON com livros, observações
- **Retorno**: ID da conta a pagar criada

## 6. Gatilhos (Triggers)

### 6.1. set_timestamp_customers, set_timestamp_suppliers, set_timestamp_books, set_timestamp_accounts_receivable, set_timestamp_accounts_payable
- **Descrição**: Atualiza o campo updated_at antes de cada UPDATE

### 6.2. after_sale_item_insert
- **Descrição**: Trigger que atualiza o estoque após inserção de item de venda
- **Função**: decrease_book_stock()

### 6.3. after_book_update
- **Descrição**: Trigger que verifica o estoque mínimo após atualização
- **Função**: check_minimum_stock()

### 6.4. after_sale_item_change
- **Descrição**: Trigger que recalcula o total da venda após alterações nos itens
- **Função**: calculate_sale_total()

## 7. Segurança (Row Level Security)

RLS foi ativado para todas as tabelas, com políticas específicas para cada tabela e operação:

### 7.1. Políticas para tabela Users
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE, DELETE: Apenas administradores

### 7.2. Políticas para tabela Customers
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE: Admin, manager, cashier
- DELETE: Admin, manager

### 7.3. Políticas para tabela Suppliers
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE: Admin, manager, inventory
- DELETE: Admin, manager

### 7.4. Políticas para tabela Books
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE: Admin, manager, inventory
- DELETE: Admin, manager

### 7.5. Políticas para tabela Sales
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE: Admin, manager, cashier
- DELETE: Admin, manager

### 7.6. Políticas para tabela Sale_Items
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE, DELETE: Admin, manager, cashier

### 7.7. Políticas para tabelas Accounts_Receivable e Accounts_Payable
- SELECT: Usuários autenticados podem visualizar
- INSERT, UPDATE, DELETE: Admin, manager

## 8. Dados Iniciais

- Um usuário administrador foi criado com email 'admin@erp-livraria.com' e role 'admin'

## 9. Uso do Sistema

Este banco de dados suporta todas as principais funcionalidades do ERP de livraria:

1. **Gerenciamento de Clientes**: Cadastro, histórico, notas
2. **Gerenciamento de Fornecedores**: Cadastro, histórico de compras
3. **Controle de Estoque**: Livros, níveis mínimos, alertas
4. **Vendas**: Registro de vendas, itens, pagamentos
5. **Financeiro**: Contas a pagar e receber, relatórios
6. **Relatórios**: Visões para análises e alertas

As políticas de segurança garantem que cada tipo de usuário acesse apenas as funcionalidades apropriadas para seu papel.